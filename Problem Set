'''
Problem set 1 - Is the Word Guessed
We will start by writing 3 simple functions that will help us easily code the Hangman problem.
First, implement the function isWordGuessed that takes in two parameters -a string, secretWord, 
and a list of letters, letterGuessed. The function returns a boolean -True if secretWord has been 
guessed (ie, all the letters of secretWord are in letterGuessed) and False otherwise.
'''

def isWordGuessed(secretWord, letterGuessed):
    '''
    secretWord: string, the word the user is guessing 
    lettersGuessed: list, what letters have been guessed so far
    returns: boolean, True if all the letters of secretWord are in lettersGuessed;
        False otherwise
    '''
    print(letterGuessed)
    for letter in letterGuessed:     # Pick out guessed letter one at a time
        if letter not in secretWord: # Check if guessed letter in secretWord
            return False             # False returned as soon as letter does not match
    return True                      # if everything matches, exits loop and True returned


'''
Problem set 2 - Printing Out the User's Guess
Next, implement the function getGuessWord that takes in two parameters - a string, secretWord, and 
a list of letters, lettersGuessed. This function returns a string that is comprised of letters and 
underscores, based in what letters in lettersGuessed are in secretWord. This shouldn't be too different
from isWordGuessed !
'''

def getGuessedWord(secretWord, lettersGuessed):
    '''
    secretWord: string, the word the user is guessing
    lettersGuessed: list, what letters have been guessed so far
    returns: string, comprised of letters and underscores that represents
      what letters in secretWord have been guessed so far.
    '''
    FinalWordGuessed = []
    GuessedWord = []
    
    for letter in secretWord:                      # List out each letters in secretWord
        if letter in lettersGuessed:               # Compare them to letters in lettersGuessed
            GuessedWord.append(letter + ' ')       # Append letters to GuessedWord if there's a match
        else:
            GuessedWord.append('_' + ' ')          # If no match, append a underscore in place of letter
    FinalWordGuessed = ''.join(GuessedWord)
    
    return FinalWordGuessed                        # This function prints out GuessedWord


'''
Problem Set 3 - Printing Out all Available Letters
Next, implement the function getAvailableLetters that takes in one parameter - a list of letters, lettersGuessed.
This function returns a string that is comprised of lowercase English letters - all lowercase English letters that
are not in letterGuessed.
'''
def getAvailableLetters(lettersGuessed):
    
    '''
    lettersGuessed: list, what letters have been guessed so far
    returns: string, comprised of letters that represents what letters
    have not yet been guessed.
    '''
    import string
    alphabets = list(string.ascii_lowercase)
    
    for letter in lettersGuessed:                # 'List' out each letter from lettersGuessed
         if letter in alphabets:                 # Compare each letter to alphabets in string.ascii_lowercase
            alphabets.remove(letter)             # If alphabets in string.ascii_lowercase match, remove alphabe
    RemainingAlphabets = ''.join(alphabets)      # Converts alphabets from list to string
    return RemainingAlphabets                    # Print out remaining alphabets
